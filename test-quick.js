// Test rapide sans base de donn√©es - juste la compilation et structure
const { execSync } = require('child_process');
const fs = require('fs');

console.log('‚ö° Test rapide Restaurant SaaS Backend');
console.log('=====================================\n');

function testQuick() {
  const tests = [
    {
      name: 'Compilation TypeScript',
      command: 'npx tsc --noEmit',
      description: 'V√©rifier que le code TypeScript est valide'
    },
    {
      name: 'Build NestJS',
      command: 'npm run build',
      description: 'Compiler l\'application pour la production'
    },
    {
      name: 'G√©n√©ration Prisma',
      command: 'npx prisma generate',
      description: 'G√©n√©rer le client Prisma depuis le sch√©ma'
    }
  ];

  let passed = 0;
  let total = tests.length;

  tests.forEach((test, index) => {
    try {
      console.log(`${index + 1}Ô∏è‚É£  ${test.name}...`);
      console.log(`   ${test.description}`);
      
      execSync(test.command, { stdio: 'pipe' });
      console.log('‚úÖ R√©ussi\n');
      passed++;
      
    } catch (error) {
      console.log(`‚ùå √âchec: ${error.message}\n`);
    }
  });

  // V√©rification des fichiers g√©n√©r√©s
  console.log('üìÅ V√©rification des fichiers g√©n√©r√©s...');
  const expectedFiles = [
    { path: 'dist/main.js', description: 'Point d\'entr√©e principal' },
    { path: 'dist/app.module.js', description: 'Module racine NestJS' },
    { path: 'dist/prisma/prisma.service.js', description: 'Service base de donn√©es' },
    { path: 'dist/tenants/tenants.controller.js', description: 'Contr√¥leur restaurants' },
    { path: 'dist/tenants/tenants.service.js', description: 'Service restaurants' },
    { path: 'node_modules/@prisma/client/index.js', description: 'Client Prisma g√©n√©r√©' }
  ];

  let filesOk = 0;
  expectedFiles.forEach(file => {
    if (fs.existsSync(file.path)) {
      console.log(`‚úÖ ${file.path} - ${file.description}`);
      filesOk++;
    } else {
      console.log(`‚ùå ${file.path} - ${file.description} (MANQUANT)`);
    }
  });

  console.log(`\nüìä R√©sultats:`);
  console.log(`   Tests de compilation: ${passed}/${total}`);
  console.log(`   Fichiers g√©n√©r√©s: ${filesOk}/${expectedFiles.length}`);

  if (passed === total && filesOk === expectedFiles.length) {
    console.log('\nüéâ TOUS LES TESTS RAPIDES R√âUSSIS !');
    console.log('‚ú® Le projet est pr√™t pour les tests avec base de donn√©es');
    console.log('\nPour tester avec une vraie base de donn√©es:');
    console.log('   node test-with-database.js');
    console.log('\nOu d√©marrer manuellement:');
    console.log('   docker-compose up -d');
    console.log('   # Attendre 30s puis:');
    console.log('   docker-compose exec app npx prisma migrate dev');
    return true;
  } else {
    console.log('\n‚ùå Certains tests ont √©chou√©');
    console.log('V√©rifiez les erreurs ci-dessus avant de continuer');
    return false;
  }
}

testQuick();












